// Function to add an element to the queue
//implimentation of circular queue
int write_queue(Queue_t *q, int data) {
    if (IsQueueFull(q) == SUCCESS) {
        return FAILURE; // Returns FAILURE if the queue is full
    }

    if (q->front == -1) {
        q->front = 0; // If front is -1, the queue is not empty, and the front is set to 0
    }

    q->rear = ((q->rear) + 1) % (q->capacity); // Increments the rear pointer circularly

    q->Que[q->rear] = data; // Adds the data at the rear position in the queue

    (q->count)++; // Increases the count of elements in the queue

    return SUCCESS; // Returns SUCCESS after successfully adding the data to the queue
}
 #include "queue.h"

// Function to clear the queue
void clear_queue(Queue_t *q) {
    while (!IsQueueEmpty(q)) {
        dequeue(q); // Dequeue elements until the queue is empty
    }
}

#include "queue.h"

// Function to read the front element from the queue
int read_queue(Queue_t *q) {
    if (IsQueueEmpty(q)) {
        // Here, returning -1 as an invalid value (modify as needed)
        return -1;
    }
    
    int frontElement = q->Que[q->front]; // Get the front element
    return frontElement;
}

//2nd question  Write a function to extract the payload from the given data and return the payload data in a new array to the calling function
#include <stdio.h>
#include <stdlib.h>

// Function to extract payload data
unsigned char* extractPayload(unsigned char input_array[], int input_length) {
    if (input_length < 5) {
        // Not enough data to form a complete frame
        return NULL;
    }

    unsigned short command = (input_array[0] << 8) | input_array[1];
    unsigned short length = (input_array[2] << 8) | input_array[3];

    if (input_length < length + 4 || length < 2) {
        // Incomplete or invalid frame
        return NULL;
    }

    unsigned char data_type = input_array[4];
    int payload_length = length - 1;
    
    unsigned char* payload = (unsigned char*)malloc(payload_length * sizeof(unsigned char));
    if (payload == NULL) {
        // Memory allocation failed
        return NULL;
    }

    // Copy payload data into the new array
    for (int i = 0; i < payload_length; i++) {
        payload[i] = input_array[i + 5];
    }

    return payload;
}

int main() {
    unsigned char input_array[] = {0x00, 0x02, 0x00, 0x0A, 0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
    int input_length = sizeof(input_array) / sizeof(input_array[0]);

    unsigned char* output_data = extractPayload(input_array, input_length);
    
    if (output_data != NULL) {
        printf("Output Data: ");
        for (int i = 0; i < input_array[3] - 1; i++) {
            printf("%02X ", output_data[i]);
        }
        free(output_data); // Free the dynamically allocated memory
    } else {
        printf("Invalid input or insufficient data to form a complete frame.");
    }

    return 0;
}

